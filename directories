#!python3

# TODOS:

# Change to pretty binary tree printer
# Similar to tree
# https://www.baeldung.com/java-print-binary-tree-diagram

# Directory names in bold

# Clean code printer (prefix_info)

# Clean argparse

# Add main function

# Add doc to functions

# Add rule for unknown directories

from rules import allRules
import yaml


# Colors for terminal
class Style():
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'


# prefix components
space  = '    '
branch = '│   '

# pointers
tee  = '├── '
last = '└── '


def check_is_list(l):
    assert(isinstance(l, list))


def get_subdirs(directory):
    subdirs = directory['subdirs'] if 'subdirs' in directory else []
    check_is_list(subdirs)
    return subdirs


def print_directory(directory, prefix="", prefix_info="", prefix_path="", root=False):
    name = directory['name']

    if root:
        path = ""
    else:
        path = directory['path']
        desc = directory['desc']

    subdirs = get_subdirs(directory)

    n = len(subdirs)

    print(f"{prefix}{Style.YELLOW}{Style.BOLD}{name}{Style.RESET}")

    pointer = '  ' if n == 0 else '│ '
    
    if root:
        print(f"│")
    else:
        print(f"{prefix_info}{pointer}{Style.MAGENTA}Desc:{Style.RESET} {desc}")
        print(f"{prefix_info}{pointer}{Style.MAGENTA}Path:{Style.RESET} {Style.CYAN}{prefix_path}{path}{Style.RESET}")
        print(f"{prefix_info}{pointer}")
        
    for i, directory in enumerate(subdirs):
        if i == n-1:
            print_directory(directory, prefix_info + last, prefix_info + space, prefix_path + path)
        else:
            print_directory(directory, prefix_info + tee, prefix_info + branch, prefix_path + path)


def check_rules_equal(config):
    configRules = list(config['rules'].keys())
    scriptRules = list(map(lambda rule: rule.key, allRules))
    
    if configRules != scriptRules:
        raise ValueError(f"Config rules and rules defined in script are different !\nConfig rules: {configRules}\nScript rules: {scriptRules}")


def check_rules(config):
    check_rules_equal(config)

    def check_directory(directory, prefixPath=''):
        path = prefixPath + directory['path']

        for rule in allRules:
            rule.check(path)

        for directory in get_subdirs(directory):
            check_directory(directory, prefixPath)

    directories = config['directories']

    for directory in directories:
        check_directory(directory)

    return 0


with open("directories.yml", "r") as f:
    try:
        data = yaml.safe_load(f)
        directories = data['directories']
        check_is_list(directories)

        check_rules(data)

        root = {}
        root['name'] = 'My directories'
        root['subdirs'] = directories

        print_directory(root, root=True)

    except yaml.YAMLError as exc:
        print("Error when loading yaml:")
        print(exc)


